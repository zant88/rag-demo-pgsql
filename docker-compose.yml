services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg15
    container_name: rag-postgres
    environment:
      POSTGRES_DB: rag_knowledge_db
      POSTGRES_USER: apple
      POSTGRES_PASSWORD: apple
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apple -d rag_knowledge_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: rag-backend
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=rag_knowledge_db
      - DATABASE_USER=apple
      - DATABASE_PASSWORD=apple
      - COHERE_API_KEY=${COHERE_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - DEBUG=true
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend/uploads:/app/uploads
      # Mount source code for development hot reloading
      - ./backend/app:/app/app:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag-frontend
    environment:
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  default:
    name: rag-network